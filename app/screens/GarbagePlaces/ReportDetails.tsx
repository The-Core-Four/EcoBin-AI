import React, { useState } from 'react';
import { 
  ScrollView, 
  StyleSheet, 
  Text, 
  View, 
  SafeAreaView, 
  TouchableOpacity, 
  Linking, 
  ActivityIndicator,
  Alert 
} from 'react-native';
import { useRoute } from '@react-navigation/native';
import * as Print from 'expo-print';
import * as Sharing from 'expo-sharing';
import Icon from 'react-native-vector-icons/MaterialIcons';
import Header from '../../Components/HeaderAdmin';
import { FIREBASE_DB } from '../../../Firebase_Config';
import { doc, getDoc } from 'firebase/firestore';

// import { useUser } from '../../../contexts/UserContext'; // TODO: Uncomment when user context is implemented

/**
 * Interface defining the structure of a Garbage Place
 */
interface GarbagePlace {
  id: string;
  locationName: string;
  address: string;
  capacity: string;
  contactPerson: string;
  phoneNumber: string;
  wasteType: string;
}

/**
 * Interface for DetailItem component props
 */
interface DetailItemProps {
  icon: string;
  label: string;
  value: string;
}

/**
 * Main component for displaying and generating garbage collection points reports
 */
const ReportDetails = () => {
  // Hooks and state management
  const route = useRoute();
  const { garbagePlaces = [] } = route.params as { garbagePlaces: GarbagePlace[] };
  const [generatingPDF, setGeneratingPDF] = useState(false);
  // const { user } = useUser(); // TODO: Uncomment when user context is ready

  // PDF Generation Handlers -------------------------------------------------

  /**
   * Generates PDF report and shares it using device's sharing capabilities
   */
  const generatePDF = async () => {
    setGeneratingPDF(true);
    try {
      // Fetch company information from Firestore
      const companySnap = await getDoc(doc(FIREBASE_DB, 'company/EcoBinAI'));
      
      // Validate company data exists
      if (!companySnap.exists()) {
        throw new Error('Company information not found in database');
      }
      const companyData = companySnap.data();
  
      // Generate PDF content
      const htmlContent = createPDFContent(
        garbagePlaces, 
        companyData,
        // user // TODO: Uncomment when user context is implemented
      );
  
      // Create PDF file
      const { uri } = await Print.printToFileAsync({ 
        html: htmlContent,
        width: 794,   // A4 width in pixels (210mm)
        height: 1123, // A4 height in pixels (297mm)
      });
  
      // Share the generated PDF
      if (await Sharing.isAvailableAsync()) {
        await Sharing.shareAsync(uri, {
          dialogTitle: 'Share EcoBin Report',
          mimeType: 'application/pdf',
          UTI: 'com.adobe.pdf',
          orientation: Print.PrintOptionsOrientation.Portrait
        });
      }
    } catch (error) {
      let errorMessage = 'Failed to generate report. Please try again.';
      
      // Handle specific error cases
      if (error.code === 'permission-denied') {
        errorMessage = 'You don\'t have permission to generate reports';
      } else if (error.message.includes('Company information')) {
        errorMessage = 'Company data not configured properly';
      }
      
      console.error('PDF Generation Error:', error);
      Alert.alert('Error', errorMessage);
    } finally {
      setGeneratingPDF(false);
    }
  };

  // PDF Content Creation ----------------------------------------------------

  /**
   * Creates HTML content for PDF generation
   */
  const createPDFContent = (
    places: GarbagePlace[], 
    company: any, 
    /* user: any // TODO: Add user parameter when implemented */
  ) => `
    <html>
      <head>
        <style>
          ${PDF_STYLES}
        </style>
      </head>
      <body>
        <!-- Company Header -->
        <header>
          ${company?.logoURL ? `
            <img src="${company.logoURL}" 
                 class="logo" 
                 alt="EcoBin AI Logo">` : ''}
          <div class="company-info">
            <h1>${company?.name || 'EcoBin AI Waste Management'}</h1>
            <p>${company?.address || '123 Eco Park Road, Green City'}</p>
            <p>Tel: ${company?.phone || '(94) 112-456789'} | 
               Email: ${company?.email || 'info@ecobin.ai'}</p>
          </div>
        </header>

        <!-- Report Metadata -->
        <div class="report-meta">
          <h2>GARBAGE COLLECTION POINTS REPORT</h2>
          <p>Generated: ${new Date().toLocaleString()}</p>
          <!-- TODO: Add user display name when implemented -->
          <!-- <p>Generated by: ${/* user?.displayName || */ 'System Administrator'}</p> -->
        </div>

        <!-- Main Data Table -->
        ${renderPDFTable(places)}

        <!-- Report Footer -->
        ${PDF_FOOTER}
      </body>
    </html>
  `;

  /**
   * Renders the PDF table with garbage place data
   */
  const renderPDFTable = (places: GarbagePlace[]) => `
    <table>
      <thead>
        <tr>
          ${['Location', 'Address', 'Capacity', 'Contact', 'Phone', 'Waste Type']
            .map(h => `<th>${h}</th>`).join('')}
        </tr>
      </thead>
      <tbody>
        ${places.map(place => `
          <tr>
            <td>${place.locationName}</td>
            <td>${place.address}</td>
            <td>${place.capacity}kg</td>
            <td>${place.contactPerson}</td>
            <td>${place.phoneNumber}</td>
            <td>${place.wasteType}</td>
          </tr>
        `).join('')}
      </tbody>
    </table>
  `;

  // UI Components -----------------------------------------------------------

  /**
   * DetailItem component for consistent information display
   */
  const DetailItem: React.FC<DetailItemProps> = ({ icon, label, value }) => (
    <View style={styles.detailItem}>
      <Icon name={icon} size={16} color="#4B5563" />
      <Text style={styles.detailLabel}>{label}:</Text>
      <Text style={styles.detailValue}>{value}</Text>
    </View>
  );

  /**
   * Handles opening addresses in maps application
   */
  const openInMaps = (address: string) => {
    Linking.openURL(`https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(address)}`)
      .catch(() => Alert.alert('Error', 'Could not open maps application'));
  };

  // Render ------------------------------------------------------------------
  return (
    <SafeAreaView style={styles.container}>
      <Header />
      
      <ScrollView contentContainerStyle={styles.content}>
        <Text style={styles.title}>EcoBin Collection Points Report</Text>
        
        {garbagePlaces.length > 0 ? (
          garbagePlaces.map((place) => (
            <View key={place.id} style={styles.card}>
              {/* Location Name and Address */}
              <Text style={styles.cardTitle}>{place.locationName}</Text>
              <TouchableOpacity 
                style={styles.addressContainer}
                onPress={() => openInMaps(place.address)}
              >
                <Icon name="place" size={16} color="#2563EB" />
                <Text style={styles.addressText}>{place.address}</Text>
              </TouchableOpacity>

              {/* Detail Information Grid */}
              <View style={styles.detailsGrid}>
                <DetailItem icon="storage" label="Capacity" value={`${place.capacity}kg`} />
                <DetailItem icon="person" label="Contact" value={place.contactPerson} />
                <DetailItem icon="phone" label="Phone" value={place.phoneNumber} />
                <DetailItem icon="delete" label="Waste Type" value={place.wasteType} />
              </View>
            </View>
          ))
        ) : (
          // Empty State
          <View style={styles.emptyState}>
            <Icon name="assignment" size={40} color="#CBD5E1" />
            <Text style={styles.emptyText}>No collection points available</Text>
            <Text style={styles.emptySubtext}>Add locations to generate reports</Text>
          </View>
        )}
      </ScrollView>

      {/* PDF Generation Button */}
      {garbagePlaces.length > 0 && (
        <TouchableOpacity 
          style={styles.downloadButton}
          onPress={generatePDF}
          disabled={generatingPDF}
        >
          {generatingPDF ? (
            <ActivityIndicator color="#FFF" />
          ) : (
            <>
              <Icon name="picture-as-pdf" size={20} color="#FFF" />
              <Text style={styles.downloadButtonText}>Generate PDF Report</Text>
            </>
          )}
        </TouchableOpacity>
      )}
    </SafeAreaView>
  );
};

// PDF Styling ---------------------------------------------------------------
const PDF_STYLES = `
  body {
    font-family: 'Helvetica', sans-serif;
    margin: 2cm;
    color: #1F2937;
  }

  header {
    display: flex;
    align-items: center;
    border-bottom: 2px solid #10B981;
    padding-bottom: 20px;
    margin-bottom: 30px;
  }

  .logo {
    height: 80px;
    margin-right: 20px;
  }

  .company-info h1 {
    font-size: 24px;
    color: #111827;
    margin: 0 0 4px 0;
  }

  table {
    width: 100%;
    border-collapse: collapse;
    margin: 25px 0;
  }

  th, td {
    padding: 12px;
    text-align: left;
    border-bottom: 1px solid #E5E7EB;
  }

  th {
    background-color: #F3F4F6;
    font-weight: 600;
  }

  tr:nth-child(even) {
    background-color: #F9FAFB;
  }
`;

const PDF_FOOTER = `
  <footer>
    <div class="signature">
      <p>Authorized Signature:</p>
      <div class="signature-line"></div>
    </div>
    <p class="disclaimer">
      This report contains sensitive information intended for internal use only.
      Unauthorized distribution is prohibited.
    </p>
  </footer>
`;

// Component Styles ----------------------------------------------------------
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F9FAFB',
  },
  content: {
    padding: 20,
    paddingBottom: 100,
  },
  title: {
    fontSize: 22,
    fontWeight: '700',
    color: '#1F2937',
    textAlign: 'center',
    marginBottom: 25,
  },
  card: {
    backgroundColor: '#FFF',
    borderRadius: 12,
    padding: 18,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.05,
    shadowRadius: 4,
    elevation: 2,
  },
  cardTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#1F2937',
    marginBottom: 12,
  },
  addressContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 16,
  },
  addressText: {
    color: '#2563EB',
    marginLeft: 8,
    fontSize: 14,
  },
  detailsGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 12,
  },
  detailItem: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#F3F4F6',
    borderRadius: 8,
    padding: 12,
    minWidth: '48%',
    flexGrow: 1,
  },
  detailLabel: {
    color: '#4B5563',
    fontSize: 12,
    marginLeft: 8,
    marginRight: 4,
  },
  detailValue: {
    color: '#1F2937',
    fontSize: 14,
    fontWeight: '500',
  },
  downloadButton: {
    position: 'absolute',
    bottom: 20,
    left: 20,
    right: 20,
    backgroundColor: '#10B981',
    borderRadius: 8,
    padding: 16,
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    gap: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  downloadButtonText: {
    color: '#FFF',
    fontSize: 16,
    fontWeight: '600',
  },
  emptyState: {
    alignItems: 'center',
    padding: 40,
  },
  emptyText: {
    fontSize: 16,
    color: '#6B7280',
    marginTop: 16,
  },
  emptySubtext: {
    fontSize: 14,
    color: '#9CA3AF',
    marginTop: 8,
  },
});

export default ReportDetails;